#!/usr/bin/env python3

"""
Compute a survival analysis for each bug reported in the given JSON file. This
JSON file is generated by running `magma/tools/benchd/exp2json.py` on the Magma
work directory.

Author: Adrian Herrera
"""


from argparse import ArgumentParser, Namespace
from collections import defaultdict
from math import sqrt
from pathlib import Path
from typing import Tuple
import json
import warnings

from lifelines import KaplanMeierFitter
from lifelines.utils import restricted_mean_survival_time as rmst
import pandas as pd


NUM_TRIALS = 30
TRIAL_LEN = 18 * 60 * 60

ddr = lambda: defaultdict(ddr)


def parse_args() -> Namespace:
    """Parse command-line arguments."""
    parser = ArgumentParser(description='Magma survival analysis')
    parser.add_argument('json', type=Path, nargs='+',
                        help='Magma-generated JSON file (containing bug data)')
    return parser.parse_args()


def get_time_to_bug(data: dict) -> dict:
    """Get time-to-bug data from Magma JSON dictionary."""
    for fuzzer, f_data in data.items():
        for target, t_data in f_data.items():
            for program, p_data in t_data.items():
                bugs = ddr()
                for run, r_data in p_data.items():
                    for metric, m_data in r_data.items():
                        for bug, time in m_data.items():
                            if metric not in bugs[bug]:
                                bugs[bug][metric] = [None] * NUM_TRIALS
                            bugs[bug][metric][int(run)] = time
                for bug, b_data in bugs.items():
                    yield dict(
                        target=target,
                        program=program,
                        fuzzer=fuzzer,
                        bug=bug,
                        **b_data,
                    )


def calc_survival(data: dict) -> Tuple[float, float]:
    """Do the survival analysis."""
    df = pd.DataFrame(data)
    T = df.fillna(TRIAL_LEN) / 60 / 60
    E = df.notnull()

    kmf = KaplanMeierFitter()
    kmf.fit(T, E)

    # Compute the restricted mean survival time and 95% confidence interval
    surv_time_mean, surv_time_var = rmst(kmf, t=TRIAL_LEN / 60 / 60,
                                         return_variance=True)
    surv_time_var = abs(surv_time_var)
    surv_time_ci = 1.96 * (sqrt(surv_time_var) /
                           sqrt(len(kmf.survival_function_)))

    return surv_time_mean, surv_time_ci


def main():
    """The main function."""
    args = parse_args()

    # Ignore warnings
    warnings.simplefilter("ignore")

    survival_times = dict(target=[],
                          program=[],
                          bug=[],
                          src=[],
                          fuzzer=[],
                          survival_time=[],
                          survival_ci=[])

    for magma_json in args.json:
        # Read Magma JSON data
        with magma_json.open() as inf:
            json_data = json.load(inf).get('results', {})

        # Do survival analysis on 'triggered' results
        for ttb in get_time_to_bug(json_data):
            if 'triggered' not in ttb:
                surv_time_mean = None
                surv_time_ci = None
            else:
                triggered_data = ttb['triggered']
                surv_time_mean, surv_time_ci = calc_survival(triggered_data)

            # Save table data
            survival_times['target'].append(ttb['target'])
            survival_times['program'].append(ttb['program'])
            survival_times['bug'].append(ttb['bug'])
            survival_times['src'].append(magma_json.stem)
            survival_times['fuzzer'].append('afl')
            survival_times['survival_time'].append(surv_time_mean)
            survival_times['survival_ci'].append(surv_time_ci)

    # Write to CSV
    print(pd.DataFrame.from_dict(survival_times).sort_values(by='bug').to_csv(index=False))


if __name__ == '__main__':
    main()
